@startuml





/' Objects '/

class Game {
	+Game()
	+~Game()
	-playground : PlayGround*
	-renderer : SDL_Renderer*
	-s : Snake*
	-mainWindow : Window*
	-isRunning : bool
	+running() : bool
	-dir : int
	+gameInit() : void
	+gameLoop() : void
}


class PlayGround {
	+PlayGround(SDL_Renderer*)
	-renderer : SDL_Renderer*
}


class Segment {
	+Segment(int xx, int yy)
	+~Segment()
	+dstS : SDL_Rect
	+srcS : SDL_Rect
	+next : Segment*
	+x : int
	+y : int
	+SetPosition() : void
	+addSegment(int xx, int yy) : void
}


class Snake {
	+Snake()
	+~Snake()
	+head : Segment*
	-tail : Segment*
	+collisionWithBorder() : bool
	+collisionWithHimself() : bool
	+dir : int
	+length() : int
	+x : int
	+y : int
	+Draw(SDL_Renderer* renderer, int r, int g, int b, int a) : void
	+Eat() : void
	+MoveDown() : void
	+MoveLeft() : void
	+MoveRight() : void
	+MoveUp() : void
}


class SpriteLoader {
	+SpriteLoader()
	+~SpriteLoader()
	+{static} LoadSprite(const char* fileName, SDL_Renderer* ren) : SDL_Texture*
}


class Window {
	+Window()
	+~Window()
	+GetRenderer() : SDL_Renderer*
	#renderer : SDL_Renderer*
	#window : SDL_Window*
	-frame_time_interval : Uint32
	-frame_time_start : Uint32
	+WindowInit(const char* nameWindow, int posX, int posY, int rendererW, int rendererH, bool fullscreen) : int
	+ClearRenderer(SDL_Renderer* renderer) : void
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.Game o-- .PlayGround


.Game o-- .Snake


.Game o-- .Window


.Segment o-- .Segment


.Snake "2" o-- .Segment






/' Nested objects '/



@enduml

